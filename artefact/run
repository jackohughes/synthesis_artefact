#!/bin/bash

DEMO=FALSE
CATEGORIES=""
CATEGORIESFLAG=""
FILES=""
FILESFLAG=""

SHOWPROGRAM=FALSE
SHOWPROGRAMFLAG=""

VERBOSE=FALSE
VERBOSEFLAG=""
REPEATS="10"
TIMEOUT="10"

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      EXTENSION="$2"
        echo "-a, --attempts int                                Run each benchmark N times and average the results (default: N=10)"
        echo "-c, --categories \"cat_1 ... cat_n\"                Runs all the benchmarks of the supplied categories. Options may be any"
        echo "                                                  combination of the following: List, Stream, Bool, Maybe, Nat, Tree, Misc"
        echo "-d, --demo                                        Run a quick instance (run each benchmark only once) of"
        echo "                                                  the benchmarks for the Stream category of programs to check"
        echo "                                                  things are working"
        echo "-f, --files \"name:cat_1 ... name:cat_n\"           Supply the benchmark tool with a list of benchmarks to run given by"
        echo "                                                  the benchmarks name \(see benchmarkList\) followed by the category to"
        echo "                                                  which it belongs separated by a colon"
        echo "-h, --help                                        Print usage"
        echo "-s, --show-program                                Display synthesised program for each benchmark"
        echo "-t, --timeout int                                 Specify timeout limit for each benchmark in seconds (default: N=10)"
        echo "-v, --verbose                                     Display aggregate measuring info for each benchmark"
        exit 0
        ;;
    -c|--categories)
      CATEGORIES="$2"
      CATEGORIESFLAG="-c $2"
      shift # past argument
      shift # past value
      ;;
    -f|--files)
      FILES="$2"
      FILESFLAG="-f $2"
      shift # past argument
      shift # past value
      ;;
    -a|--attempts)
      REPEATS="$2"
      shift # past argument
      shift # past value
      ;;
    -t|--timeout)
      TIMEOUT="$2"
      shift # past argument
      shift # past value
      ;;
    -v|--verbose)
      VERBOSE=TRUE
      VERBOSEFLAG="-v"
      shift # past argument
      ;;
    -d|--demo)
      DEMO=TRUE
      shift # past argument
      ;;  
    -s|--show-program)
      SHOWPROGRAM=TRUE
      SHOWPROGRAMFLAG="-s"
      shift # past argument
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

DATE=$(date +"%T")
LOGFILE="benchmarks-$DATE.log"
PDFFILE="results-$DATE.pdf"

IMAGE=$(cat .imageID)
if [ $? -eq 0 ]
then
    echo "Running container with config:"
    echo "  - Demo mode: $DEMO"
    echo "  - Verbose flag set: $VERBOSE"
    echo "  - Show program flag set: $SHOWPROGRAM"
    echo "  - Attempts: $REPEATS"
    echo "  - Timeout: $TIMEOUT seconds"
    if [[ -z "$FILES" ]]; 
    then
        echo "  - Files: All "
        if [[ -z "$CATEGORIES" ]]; 
        then
            if [ "$DEMO" == "TRUE" ];
            then 
                echo "  - Categories: List"
            else 
                echo "  - Categories: All"
            fi
        else 
            echo "  - Categories: $CATEGORIES"
        fi
    else 
        echo "  - Files: $FILES"
        echo "  - Categories: None"
    fi
    if [ "$DEMO" == "TRUE" ];
    then 
        docker run --cidfile .cid -ti $IMAGE -a 1 -c "List" $VERBOSEFLAG $SHOWPROGRAMFLAG 
    else 
        docker run --cidfile .cid -ti $IMAGE -a $REPEATS -t $TIMEOUT $CATEGORIESFLAG $FILESFLAG $VERBOSEFLAG $SHOWPROGRAMFLAG 
    fi 
else 
    echo "No Image ID found! Have you run ./install yet?"
    exit 1
fi

if [ $? -eq 0 ]
then 
    CONTAINERID=$(cat .cid)
    echo "Copying results PDF from the container..."
    docker cp $CONTAINERID:results.pdf ./$PDFFILE
    if [ $? -eq 0 ]
    then
        echo "PDF copied to $PDFFILE"
    else 
        echo "Couldn't copy the PDF file!"
    exit 1
    fi
    echo "Copying logfile from the container..."
    docker cp $CONTAINERID:benchmarks.log ./$LOGFILE
    if [ $? -eq 0 ]
    then
        echo "Log file copied to $LOGFILE"
    else 
        echo "Couldn't copy the log file!"
    exit 1
    fi
else 
    echo "Container failed to run."
fi
echo "Removing container..."
docker rm $CONTAINERID > /dev/null
if [ $? -eq 0 ]
then
  rm -f .cid
  echo "Container $CONTAINERID removed. All done!" 
else
  echo "Couldn't remove the container $CONTAINERID"
fi
exit 0